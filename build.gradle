
defaultTasks 'build'

ext {
}

if (JavaVersion.current().isJava8Compatible()) {
    allprojects {
        tasks.withType(Javadoc) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }
    }
}

allprojects {

	ext {
        isSnapshot = true
        fjBaseVersion = "4.3"

        snapshotAppendix = "-SNAPSHOT"
		fjVersion = fjBaseVersion + (isSnapshot ? snapshotAppendix : "")
        fjConsumeVersion = "4.2"

        signModule = false

        projectTitle = "Functional Java"
		projectName = "functionaljava"
        pomProjectName = projectTitle
        pomOrganisation = projectTitle
        projectDescription = "Functional Java is an open source library that supports closures for the Java programming language"
        projectUrl = "http://functionaljava.org/"
        scmUrl = "git://github.com/functionaljava/functionaljava.git"
        scmGitFile = "scm:git@github.com:functionaljava/functionaljava.git"

        sonatypeBaseUrl = "https://oss.sonatype.org"
        sonatypeSnapshotUrl = "$sonatypeBaseUrl/content/repositories/snapshots/"
        sonatypeRepositoryUrl = "$sonatypeBaseUrl/content/groups/public"
        sonatypeReleaseUrl = "$sonatypeBaseUrl/service/local/staging/deploy/maven2/"
        sonatypeUploadUrl = isSnapshot ? sonatypeSnapshotUrl : sonatypeReleaseUrl
        primaryEmail = "functionaljava@googlegroups.com"

        dependencyJunit = "junit:junit:4.11"
    }

	version = fjVersion
	group = "org.functionaljava"
}

subprojects {

    defaultTasks "build"

    buildscript {
        repositories {
            mavenCentral()
        }

        dependencies {
            classpath 'me.tatarka:gradle-retrolambda:2.5.0'
        }
    }

    apply from: "$rootDir/lib.gradle"
    apply plugin: "maven"
    apply plugin: "java"
    apply plugin: "signing"
    apply plugin: "eclipse"
    apply plugin: "osgi"

    sourceCompatibility = "1.8"

    task javadocJar(type: Jar, dependsOn: "javadoc") {
        classifier = 'javadoc'
        from "build/docs/javadoc"
    }

    task sourcesJar(type: Jar) {
        from sourceSets.main.allSource
        classifier = 'sources'
    }

    repositories {
        mavenCentral()
        maven {
            url sonatypeRepositoryUrl
        }
        maven {
            url "https://repo.eclipse.org/content/repositories/eclipse-releases"
        }
    }

    artifacts {
        archives jar
        archives javadocJar
        archives sourcesJar
    }

    jar {
        version project.fjVersion
        manifest {
            name = 'Functional Java'
            instruction 'Signature-Version', project.fjVersion
            instruction 'Bundle-ActivationPolicy', 'lazy'
            instruction 'Bundle-Vendor', 'functionaljava.org'
			if(project.name != "core") {
				instruction 'Require-Bundle', 'org.functionaljava;bundle-version="'+project.fjBaseVersion+'"'
			}
        }
    }

    eclipse {
      project {
        natures 'org.eclipse.pde.PluginNature'
        buildCommand 'org.eclipse.pde.ManifestBuilder'
        buildCommand 'org.eclipse.pde.SchemaBuilder'
      }
    }

	// OSGI version of jar dies if the classes folder isn't pre-created
    task ensureBuildFolder << {
      file("build/classes/main").mkdirs()
    }
    jar.dependsOn ensureBuildFolder

    // Output MANIFEST.MF statically so eclipse can see it for plugin development
    task eclipsePluginManifest(dependsOn: jar) << {
      file("META-INF").mkdirs()
      jar.manifest.writeTo(file("META-INF/MANIFEST.MF"))
    }

    eclipseProject.dependsOn eclipsePluginManifest

}


task wrapper(type: Wrapper) {
    gradleVersion = '2.0'
}

task env << {
	println System.getenv()
}